/*********************************************************

 Following is the BinaryTreeNode structure:

 class BinaryTreeNode<T> {
     T data;
     BinaryTreeNode<T> left;
     BinaryTreeNode<T> right;
     BinaryTreeNode() {
         this.data = null;
         this.left = null;
         this.right = null;
     }
     BinaryTreeNode(T data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
     BinaryTreeNode(T data, BinaryTreeNode<T> left, BinaryTreeNode<T> right) {
         this.data = data;
         this.left = left;
         this.right = right;
     }
 };
 ********************************************************/

public class Solution {
    public static BinaryTreeNode<Integer> deleteNode(BinaryTreeNode<Integer> root, int key) {
        // Write your code here.
        //base case
        if(root == null) return root;
        if(key < root.data){
            root.left = deleteNode(root.left, key);
        }
        else if(key > root.data){
            root.right = deleteNode(root.right, key);
        }
        else {
            if(root.left == null){
                return root.right;
            }
            else if(root.right == null){
                return root.left;
            }
            else {
                BinaryTreeNode<Integer> temp = minValueNode(root.right);
                root.data = temp.data;
                root.right = deleteNode(root.right, temp.data);
            }
        }

        return root;
    }

    //function to find the minimum value node
    public static BinaryTreeNode<Integer> minValueNode(BinaryTreeNode<Integer> root){
        while(root.left != null){
            root = root.left;
        }
        return root;
    }
}
