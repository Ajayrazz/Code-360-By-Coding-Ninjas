public class Solution {
    public static boolean present(char [][]board, String word, int n, int m) {
        // Write your code here.
        boolean[][] visited = new boolean[n][m];
        boolean result = false;

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == word.charAt(0)){
                    result = helper(0, i, j, board, word, visited);

                    if(result){
                        return true;
                    }
                }
            }
        }

        return false;
    }

    //Helper Function
    public static boolean helper(int idx, int i, int j, char[][] board, String word, boolean[][] visited){
        //base case
        if(idx >= word.length()){
            return true;
        }

        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != word.charAt(idx) || visited[i][j]){
            return false;
        }

        //make the changes
        visited[i][j] = true;

        //recall the function
        if(helper(idx + 1, i + 1, j, board, word, visited) ||
           helper(idx + 1, i - 1, j, board, word, visited) ||
           helper(idx + 1, i, j + 1, board, word, visited) ||
           helper(idx + 1, i, j - 1, board, word, visited)){
               return true;
        }

        //revert the changes
        visited[i][j] = false;
        return false;
    }
}
