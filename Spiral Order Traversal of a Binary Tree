/************************************************************
 
    Following is the Binary Tree node structure

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
    
************************************************************/

import java.util.*;

public class Solution
{
public static ArrayList<Integer> spiralOrder(BinaryTreeNode<Integer> root)
    {
        // Write Your Code Here.
		if(root == null) return new ArrayList<>();
		ArrayList<Integer> result = new ArrayList<>();
		Queue<BinaryTreeNode> queue = new LinkedList<>();
		queue.add(root);
		int level = 1;

		while(!queue.isEmpty()){
			int size = queue.size();
			ArrayList<Integer> temp = new ArrayList<>();
			for(int i = 0; i < size; i++){
				BinaryTreeNode node = queue.poll();
				temp.add((int)node.data);

				if(node.left != null){
					queue.add(node.left);
				}

				if(node.right != null){
					queue.add(node.right);
				}
			}

			if(level % 2 == 0){
				Collections.reverse(temp);
			}

			level += 1;

			for(int num : temp){
				result.add((int)num);
			}
		}

		return result;
    }
}
