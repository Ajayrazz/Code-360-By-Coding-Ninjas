import java.util.* ;
import java.io.*; 
/*

	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T val;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T val) {
			this.val = val;
			this.left = null;
			this.right = null;
		}
	}

*/

import java.util.ArrayList;

public class Solution {

  public static ArrayList<Integer> getLevelOrder(BinaryTreeNode root) {
    //Your code goes here
	//base case
	if(root == null){
		return new ArrayList<>();
	}

	ArrayList<Integer> result = new ArrayList<>();
	Queue<BinaryTreeNode> queue = new LinkedList<>();
	queue.add(root);

	while(!queue.isEmpty()){
		int size = queue.size();
		for(int i = 0; i < size; i++){
			BinaryTreeNode node = queue.poll();
			result.add(node.val);

			if(node.left != null){
				queue.add(node.left);
			}

			if(node.right != null){
				queue.add(node.right);
			}
		}
	}

	return result;
  }

}
